{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/integration/helpers/draft-for-test.js","dummy/tests/test-helper.js","dummy/tests/unit/services/drafts-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/integration/helpers/draft-for-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Helper | draft-for', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.drafts = this.owner.lookup('service:drafts');\n    });\n    (0, _qunit.test)('it returns a draft for the object', async function (assert) {\n      this.object = {\n        id: 1\n      };\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"nlNx6M0D\",\n        \"block\": \"{\\\"symbols\\\":[\\\"draft\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"let\\\",[[27,\\\"draft-for\\\",[[23,[\\\"object\\\"]]],null]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[7,\\\"div\\\"],[11,\\\"id\\\",\\\"value\\\"],[9],[0,\\\"\\\\n          \\\"],[1,[27,\\\"get\\\",[[27,\\\"value-of\\\",[[22,1,[]]],null],\\\"id\\\"],null],false],[0,\\\"\\\\n        \\\"],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom('#value').hasText('1');\n    });\n    (0, _qunit.test)('it reacts to a change in the returned draft', async function (assert) {\n      this.object = {\n        id: 1\n      };\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"vDz5WjjB\",\n        \"block\": \"{\\\"symbols\\\":[\\\"draft\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"let\\\",[[27,\\\"draft-for\\\",[[23,[\\\"object\\\"]]],null]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[7,\\\"div\\\"],[11,\\\"id\\\",\\\"value\\\"],[9],[0,\\\"\\\\n          \\\"],[1,[27,\\\"get\\\",[[27,\\\"value-of\\\",[[22,1,[]]],null],\\\"id\\\"],null],false],[0,\\\"\\\\n        \\\"],[10],[0,\\\"\\\\n\\\\n        \\\"],[7,\\\"button\\\"],[9],[0,\\\"\\\\n          Update!\\\\n        \\\"],[3,\\\"action\\\",[[22,0,[]],[22,1,[\\\"id\\\",\\\"set\\\"]],2]],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('button');\n      assert.dom('#value').hasText('2');\n    });\n    (0, _qunit.test)('it reacts to a change in the draft service', async function (assert) {\n      this.object = {\n        id: 1\n      };\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"nlNx6M0D\",\n        \"block\": \"{\\\"symbols\\\":[\\\"draft\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"let\\\",[[27,\\\"draft-for\\\",[[23,[\\\"object\\\"]]],null]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[7,\\\"div\\\"],[11,\\\"id\\\",\\\"value\\\"],[9],[0,\\\"\\\\n          \\\"],[1,[27,\\\"get\\\",[[27,\\\"value-of\\\",[[22,1,[]]],null],\\\"id\\\"],null],false],[0,\\\"\\\\n        \\\"],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.drafts.for(this.object).id.set(2);\n      await (0, _testHelpers.settled)();\n      assert.dom('#value').hasText('2');\n    });\n    (0, _qunit.test)('it can provide a resolver', async function (assert) {\n      this.object = {\n        id: 1\n      };\n\n      this.resolver = object => object.id;\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Vs91fH19\",\n        \"block\": \"{\\\"symbols\\\":[\\\"draft\\\"],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"let\\\",[[27,\\\"draft-for\\\",[[23,[\\\"object\\\"]]],[[\\\"resolver\\\"],[[23,[\\\"resolver\\\"]]]]]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[7,\\\"div\\\"],[11,\\\"id\\\",\\\"value\\\"],[9],[0,\\\"\\\\n          \\\"],[1,[27,\\\"get\\\",[[27,\\\"value-of\\\",[[22,1,[]]],null],\\\"id\\\"],null],false],[0,\\\"\\\\n        \\\"],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[1]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      this.drafts.for(this.object, this.resolver).id.set(2);\n      await (0, _testHelpers.settled)();\n      assert.dom('#value').hasText('2');\n    });\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-testdouble-qunit\"], function (_app, _environment, _testHelpers, _emberQunit, _emberCliTestdoubleQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"dummy/tests/unit/services/drafts-test\", [\"qunit\", \"ember-qunit\", \"@microstates/ember\", \"testdouble\"], function (_qunit, _emberQunit, _ember, _testdouble) {\n  \"use strict\";\n\n  let drafts;\n  (0, _qunit.module)('Unit | Service | drafts', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    hooks.beforeEach(function () {\n      drafts = this.owner.lookup('service:drafts');\n    });\n    (0, _qunit.module)('#for', function () {\n      (0, _qunit.test)('it returns the same draft for an object', function (assert) {\n        const first = {\n          id: 1\n        };\n        const second = {\n          id: 2\n        };\n        assert.equal(drafts.for(first), drafts.for(first), 'Returned the same draft for the same object');\n        assert.notEqual(drafts.for(first), drafts.for(second), 'Returned different drafts for different objects');\n      });\n      (0, _qunit.test)('it works with a function resolver', function (assert) {\n        const first = {\n          id: 1\n        };\n        const second = {\n          id: 1\n        };\n\n        const resolver = object => object.id;\n\n        assert.equal(drafts.for(first, resolver), drafts.for(second, resolver), 'Returned the same draft for records that resolve to the same value');\n      });\n      (0, _qunit.test)('it works with an value resolver', function (assert) {\n        const first = {\n          id: 1\n        };\n        const second = {\n          id: 1\n        };\n        const resolver = '1';\n        assert.equal(drafts.for(first, resolver), drafts.for(second, resolver), 'Returned the same draft for records with the same resolver value');\n      });\n    });\n    (0, _qunit.module)('#isDirty', function () {\n      (0, _qunit.test)('telling if an object has changed', function (assert) {\n        const object = {\n          id: 1\n        };\n        const d = drafts.for(object);\n        d.id.set(2);\n        assert.ok(drafts.isDirty(object), 'The object is recognized as being updated');\n      });\n    });\n    (0, _qunit.module)('#reset', function () {\n      (0, _qunit.test)(\"resetting an object's draft\", function (assert) {\n        const listener = _testdouble.default.function();\n\n        const object = {\n          id: 1\n        };\n        const d = drafts.for(object);\n        d.id.set(2);\n        assert.deepEqual((0, _ember.valueOf)(drafts.for(object)), {\n          id: 2\n        }, 'The draft state has been updated');\n        drafts.subscribe(object, listener);\n        const resetState = drafts.reset(object);\n        assert.deepEqual((0, _ember.valueOf)(drafts.for(object)), {\n          id: 1\n        }, 'The draft state has been reset');\n        assert.verify(listener(resetState));\n      });\n    });\n    (0, _qunit.module)('#commit', function () {\n      (0, _qunit.test)('committing the changes to an object', function (assert) {\n        const object = {\n          id: 1\n        };\n        const d = drafts.for(object);\n        d.id.set(2);\n        assert.deepEqual(object, {\n          id: 1\n        }, 'The original object is not changed');\n        const updated = drafts.commit(object);\n        assert.deepEqual(updated, {\n          id: 2\n        }, 'The updated object is returned');\n        drafts.reset(object);\n        assert.deepEqual((0, _ember.valueOf)(drafts.for(object)), {\n          id: 2\n        }, 'The initial state was updated');\n      });\n    });\n    (0, _qunit.module)('#subscribe', function () {\n      (0, _qunit.test)('subscribing to updated to a draft', function (assert) {\n        const first = _testdouble.default.function();\n\n        const second = _testdouble.default.function();\n\n        const third = _testdouble.default.function();\n\n        const object = {\n          id: 1\n        };\n        const d = drafts.for(object);\n        drafts.subscribe(object, first);\n        drafts.subscribe(object, second);\n        drafts.subscribe(object, third);\n        const firstDraft = d.id.set(2); // Ensure that all subscribers are fired\n\n        assert.verify(first(firstDraft));\n        assert.verify(second(firstDraft));\n        assert.verify(third(firstDraft));\n        const secondDraft = d.id.set(3);\n        assert.verify(first(secondDraft));\n        assert.verify(second(secondDraft));\n        assert.verify(third(secondDraft));\n      });\n      (0, _qunit.test)('turning off a subscription', function (assert) {\n        const listener = _testdouble.default.function();\n\n        const object = {\n          id: 1\n        };\n        const d = drafts.for(object);\n        const subscriber = drafts.subscribe(object, listener);\n        const secondDraft = d.id.set(2);\n        assert.verify(listener(secondDraft), {\n          times: 1\n        });\n        subscriber.unsubscribe();\n        d.id.set(3);\n\n        const {\n          callCount\n        } = _testdouble.default.explain(listener);\n\n        assert.equal(callCount, 1, 'Only called one time');\n        assert.deepEqual((0, _ember.valueOf)(drafts.for(object)), {\n          id: 3\n        }, 'The state subscriptionw was not disturbed');\n      });\n      (0, _qunit.test)('providing a resolver', function (assert) {\n        const listener = _testdouble.default.function();\n\n        const resolver = object => object.id;\n\n        const object = {\n          id: 1\n        };\n        const d = drafts.for(object, resolver);\n        drafts.subscribe({\n          id: 1\n        }, resolver, listener);\n        const newDraft = d.id.set(2);\n        assert.verify(listener(newDraft));\n      });\n    });\n  });\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}